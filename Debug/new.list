
new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa4  08003aa4  00033124  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aac  08003aac  00033124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00013124  20000000  08003ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00033124  2**0
                  CONTENTS
 10 .bss          00000164  20013124  20013124  00033124  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013288  20013288  00033124  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033124  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad33  00000000  00000000  00033154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001827  00000000  00000000  0003de87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  0003f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000858  00000000  00000000  0003ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c3b  00000000  00000000  000407f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac16  00000000  00000000  00061433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c500a  00000000  00000000  0006c049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131053  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002678  00000000  00000000  001310a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20013124 	.word	0x20013124
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003054 	.word	0x08003054

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20013128 	.word	0x20013128
 80001c4:	08003054 	.word	0x08003054

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <ILI9341_SendCommand+0x54>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <ILI9341_SendCommand+0x58>)
 80004e0:	8811      	ldrh	r1, [r2, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fac9 	bl	8001a7c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <ILI9341_SendCommand+0x5c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0f      	ldr	r2, [pc, #60]	; (800052c <ILI9341_SendCommand+0x60>)
 80004f0:	8811      	ldrh	r1, [r2, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fac1 	bl	8001a7c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80004fa:	f107 010f 	add.w	r1, r7, #15
 80004fe:	2305      	movs	r3, #5
 8000500:	2201      	movs	r2, #1
 8000502:	480b      	ldr	r0, [pc, #44]	; (8000530 <ILI9341_SendCommand+0x64>)
 8000504:	f001 ffcd 	bl	80024a2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <ILI9341_SendCommand+0x5c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <ILI9341_SendCommand+0x60>)
 800050e:	8811      	ldrh	r1, [r2, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fab2 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200131a0 	.word	0x200131a0
 8000524:	200131a4 	.word	0x200131a4
 8000528:	20013198 	.word	0x20013198
 800052c:	2001319c 	.word	0x2001319c
 8000530:	20013140 	.word	0x20013140

08000534 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <ILI9341_SendData+0x54>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a11      	ldr	r2, [pc, #68]	; (800058c <ILI9341_SendData+0x58>)
 8000548:	8811      	ldrh	r1, [r2, #0]
 800054a:	2201      	movs	r2, #1
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fa95 	bl	8001a7c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <ILI9341_SendData+0x5c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <ILI9341_SendData+0x60>)
 8000558:	8811      	ldrh	r1, [r2, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f001 fa8d 	bl	8001a7c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2305      	movs	r3, #5
 8000568:	2201      	movs	r2, #1
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <ILI9341_SendData+0x64>)
 800056c:	f001 ff99 	bl	80024a2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <ILI9341_SendData+0x5c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <ILI9341_SendData+0x60>)
 8000576:	8811      	ldrh	r1, [r2, #0]
 8000578:	2201      	movs	r2, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fa7e 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200131a0 	.word	0x200131a0
 800058c:	200131a4 	.word	0x200131a4
 8000590:	20013198 	.word	0x20013198
 8000594:	2001319c 	.word	0x2001319c
 8000598:	20013140 	.word	0x20013140

0800059c <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4623      	mov	r3, r4
 80005ac:	80fb      	strh	r3, [r7, #6]
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	807b      	strh	r3, [r7, #2]
 80005b6:	4613      	mov	r3, r2
 80005b8:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80005ba:	202a      	movs	r0, #42	; 0x2a
 80005bc:	f7ff ff86 	bl	80004cc <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	0a1b      	lsrs	r3, r3, #8
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffb3 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffae 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	b29b      	uxth	r3, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffa7 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ffa2 	bl	8000534 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80005f0:	202b      	movs	r0, #43	; 0x2b
 80005f2:	f7ff ff6b 	bl	80004cc <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff98 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000604:	88bb      	ldrh	r3, [r7, #4]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff93 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800060e:	883b      	ldrh	r3, [r7, #0]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	b29b      	uxth	r3, r3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff8c 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 800061c:	883b      	ldrh	r3, [r7, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff87 	bl	8000534 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000626:	202c      	movs	r0, #44	; 0x2c
 8000628:	f7ff ff50 	bl	80004cc <ILI9341_SendCommand>
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4613      	mov	r3, r2
 8000642:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000644:	2258      	movs	r2, #88	; 0x58
 8000646:	68f9      	ldr	r1, [r7, #12]
 8000648:	4853      	ldr	r0, [pc, #332]	; (8000798 <ILI9341_Init+0x164>)
 800064a:	f002 fc25 	bl	8002e98 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 800064e:	4a53      	ldr	r2, [pc, #332]	; (800079c <ILI9341_Init+0x168>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000654:	4a52      	ldr	r2, [pc, #328]	; (80007a0 <ILI9341_Init+0x16c>)
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800065a:	4a52      	ldr	r2, [pc, #328]	; (80007a4 <ILI9341_Init+0x170>)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000660:	4a51      	ldr	r2, [pc, #324]	; (80007a8 <ILI9341_Init+0x174>)
 8000662:	8b3b      	ldrh	r3, [r7, #24]
 8000664:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000666:	4b4d      	ldr	r3, [pc, #308]	; (800079c <ILI9341_Init+0x168>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a4d      	ldr	r2, [pc, #308]	; (80007a0 <ILI9341_Init+0x16c>)
 800066c:	8811      	ldrh	r1, [r2, #0]
 800066e:	2201      	movs	r2, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fa03 	bl	8001a7c <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000676:	4a4d      	ldr	r2, [pc, #308]	; (80007ac <ILI9341_Init+0x178>)
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 800067c:	4a4c      	ldr	r2, [pc, #304]	; (80007b0 <ILI9341_Init+0x17c>)
 800067e:	8c3b      	ldrh	r3, [r7, #32]
 8000680:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000682:	8c3b      	ldrh	r3, [r7, #32]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	69f8      	ldr	r0, [r7, #28]
 800068a:	f001 f9f7 	bl	8001a7c <HAL_GPIO_WritePin>

   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff ff1c 	bl	80004cc <ILI9341_SendCommand>
   HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 ff07 	bl	80014a8 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 800069a:	2028      	movs	r0, #40	; 0x28
 800069c:	f7ff ff16 	bl	80004cc <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80006a0:	20c0      	movs	r0, #192	; 0xc0
 80006a2:	f7ff ff13 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80006a6:	2026      	movs	r0, #38	; 0x26
 80006a8:	f7ff ff44 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80006ac:	20c1      	movs	r0, #193	; 0xc1
 80006ae:	f7ff ff0d 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80006b2:	2011      	movs	r0, #17
 80006b4:	f7ff ff3e 	bl	8000534 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80006b8:	20c5      	movs	r0, #197	; 0xc5
 80006ba:	f7ff ff07 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80006be:	2035      	movs	r0, #53	; 0x35
 80006c0:	f7ff ff38 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80006c4:	203e      	movs	r0, #62	; 0x3e
 80006c6:	f7ff ff35 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80006ca:	20c7      	movs	r0, #199	; 0xc7
 80006cc:	f7ff fefe 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80006d0:	20be      	movs	r0, #190	; 0xbe
 80006d2:	f7ff ff2f 	bl	8000534 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80006d6:	2036      	movs	r0, #54	; 0x36
 80006d8:	f7ff fef8 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80006dc:	2048      	movs	r0, #72	; 0x48
 80006de:	f7ff ff29 	bl	8000534 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80006e2:	203a      	movs	r0, #58	; 0x3a
 80006e4:	f7ff fef2 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80006e8:	2055      	movs	r0, #85	; 0x55
 80006ea:	f7ff ff23 	bl	8000534 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80006ee:	20b1      	movs	r0, #177	; 0xb1
 80006f0:	f7ff feec 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData(0);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ff1d 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80006fa:	201f      	movs	r0, #31
 80006fc:	f7ff ff1a 	bl	8000534 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000700:	202a      	movs	r0, #42	; 0x2a
 8000702:	f7ff fee3 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff14 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff11 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff ff0e 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000718:	20ef      	movs	r0, #239	; 0xef
 800071a:	f7ff ff0b 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800071e:	202b      	movs	r0, #43	; 0x2b
 8000720:	f7ff fed4 	bl	80004cc <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff05 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ff02 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff feff 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000736:	203f      	movs	r0, #63	; 0x3f
 8000738:	f7ff fefc 	bl	8000534 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 800073c:	2034      	movs	r0, #52	; 0x34
 800073e:	f7ff fec5 	bl	80004cc <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000742:	20b7      	movs	r0, #183	; 0xb7
 8000744:	f7ff fec2 	bl	80004cc <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000748:	2007      	movs	r0, #7
 800074a:	f7ff fef3 	bl	8000534 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 800074e:	20b6      	movs	r0, #182	; 0xb6
 8000750:	f7ff febc 	bl	80004cc <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000754:	200a      	movs	r0, #10
 8000756:	f7ff feed 	bl	8000534 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800075a:	2082      	movs	r0, #130	; 0x82
 800075c:	f7ff feea 	bl	8000534 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000760:	2027      	movs	r0, #39	; 0x27
 8000762:	f7ff fee7 	bl	8000534 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff fee4 	bl	8000534 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 800076c:	2011      	movs	r0, #17
 800076e:	f7ff fead 	bl	80004cc <ILI9341_SendCommand>
   HAL_Delay(100);
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f000 fe98 	bl	80014a8 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000778:	2029      	movs	r0, #41	; 0x29
 800077a:	f7ff fea7 	bl	80004cc <ILI9341_SendCommand>
   HAL_Delay(100);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f000 fe92 	bl	80014a8 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000784:	202c      	movs	r0, #44	; 0x2c
 8000786:	f7ff fea1 	bl	80004cc <ILI9341_SendCommand>
   HAL_Delay(5);
 800078a:	2005      	movs	r0, #5
 800078c:	f000 fe8c 	bl	80014a8 <HAL_Delay>
 }
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20013140 	.word	0x20013140
 800079c:	20013198 	.word	0x20013198
 80007a0:	2001319c 	.word	0x2001319c
 80007a4:	200131a0 	.word	0x200131a0
 80007a8:	200131a4 	.word	0x200131a4
 80007ac:	200131a8 	.word	0x200131a8
 80007b0:	200131ac 	.word	0x200131ac

080007b4 <ILI9341_Fill>:
  ILI9341_SetCursorPosition(x, y, x, y);
	ILI9341_SendData(color>>8);
	ILI9341_SendData(color&0xFF);
}
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80007be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80007c2:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 80007c4:	23ff      	movs	r3, #255	; 0xff
 80007c6:	817b      	strh	r3, [r7, #10]

	if(rotationNum==1 || rotationNum==3)
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <ILI9341_Fill+0x84>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d003      	beq.n	80007d8 <ILI9341_Fill+0x24>
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <ILI9341_Fill+0x84>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d107      	bne.n	80007e8 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 80007d8:	f240 133f 	movw	r3, #319	; 0x13f
 80007dc:	22ef      	movs	r2, #239	; 0xef
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fedb 	bl	800059c <ILI9341_SetCursorPosition>
 80007e6:	e00e      	b.n	8000806 <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <ILI9341_Fill+0x84>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d003      	beq.n	80007f8 <ILI9341_Fill+0x44>
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <ILI9341_Fill+0x84>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d116      	bne.n	8000826 <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 80007f8:	23ef      	movs	r3, #239	; 0xef
 80007fa:	f240 123f 	movw	r2, #319	; 0x13f
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fecb 	bl	800059c <ILI9341_SetCursorPosition>
	}


	while (n) {
 8000806:	e00e      	b.n	8000826 <ILI9341_Fill+0x72>
			n--;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3b01      	subs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe8c 	bl	8000534 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe87 	bl	8000534 <ILI9341_SendData>
	while (n) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1ed      	bne.n	8000808 <ILI9341_Fill+0x54>
	}
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000

0800083c <ILI9341_printImage>:
	}
}

//12. Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4604      	mov	r4, r0
 8000844:	4608      	mov	r0, r1
 8000846:	4611      	mov	r1, r2
 8000848:	461a      	mov	r2, r3
 800084a:	4623      	mov	r3, r4
 800084c:	80fb      	strh	r3, [r7, #6]
 800084e:	4603      	mov	r3, r0
 8000850:	80bb      	strh	r3, [r7, #4]
 8000852:	460b      	mov	r3, r1
 8000854:	807b      	strh	r3, [r7, #2]
 8000856:	4613      	mov	r3, r2
 8000858:	803b      	strh	r3, [r7, #0]
	uint32_t n = size;
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	60bb      	str	r3, [r7, #8]
	ILI9341_SetCursorPosition(x, y, w+x-1, h+y-1);
 800085e:	887a      	ldrh	r2, [r7, #2]
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	3b01      	subs	r3, #1
 8000868:	b29c      	uxth	r4, r3
 800086a:	883a      	ldrh	r2, [r7, #0]
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	3b01      	subs	r3, #1
 8000874:	b29b      	uxth	r3, r3
 8000876:	88b9      	ldrh	r1, [r7, #4]
 8000878:	88f8      	ldrh	r0, [r7, #6]
 800087a:	4622      	mov	r2, r4
 800087c:	f7ff fe8e 	bl	800059c <ILI9341_SetCursorPosition>
	for(uint32_t i=0; i<n ; i++)
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e009      	b.n	800089a <ILI9341_printImage+0x5e>
	{
		ILI9341_SendData(data[i]);
 8000886:	6a3a      	ldr	r2, [r7, #32]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe50 	bl	8000534 <ILI9341_SendData>
	for(uint32_t i=0; i<n ; i++)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	3301      	adds	r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d3f1      	bcc.n	8000886 <ILI9341_printImage+0x4a>
	}
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <ILI9341_setRotation>:

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d832      	bhi.n	8000924 <ILI9341_setRotation+0x78>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <ILI9341_setRotation+0x18>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	080008e9 	.word	0x080008e9
 80008cc:	080008fd 	.word	0x080008fd
 80008d0:	08000911 	.word	0x08000911
	{
		case 1:
			rotationNum = 1;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <ILI9341_setRotation+0x94>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80008da:	2036      	movs	r0, #54	; 0x36
 80008dc:	f7ff fdf6 	bl	80004cc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 80008e0:	2088      	movs	r0, #136	; 0x88
 80008e2:	f7ff fe27 	bl	8000534 <ILI9341_SendData>
			break;
 80008e6:	e027      	b.n	8000938 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <ILI9341_setRotation+0x94>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 80008ee:	2036      	movs	r0, #54	; 0x36
 80008f0:	f7ff fdec 	bl	80004cc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 80008f4:	2028      	movs	r0, #40	; 0x28
 80008f6:	f7ff fe1d 	bl	8000534 <ILI9341_SendData>
			break;
 80008fa:	e01d      	b.n	8000938 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <ILI9341_setRotation+0x94>)
 80008fe:	2203      	movs	r2, #3
 8000900:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000902:	2036      	movs	r0, #54	; 0x36
 8000904:	f7ff fde2 	bl	80004cc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000908:	2048      	movs	r0, #72	; 0x48
 800090a:	f7ff fe13 	bl	8000534 <ILI9341_SendData>
			break;
 800090e:	e013      	b.n	8000938 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <ILI9341_setRotation+0x94>)
 8000912:	2204      	movs	r2, #4
 8000914:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000916:	2036      	movs	r0, #54	; 0x36
 8000918:	f7ff fdd8 	bl	80004cc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800091c:	20e8      	movs	r0, #232	; 0xe8
 800091e:	f7ff fe09 	bl	8000534 <ILI9341_SendData>
			break;
 8000922:	e009      	b.n	8000938 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <ILI9341_setRotation+0x94>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800092a:	2036      	movs	r0, #54	; 0x36
 800092c:	f7ff fdce 	bl	80004cc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000930:	2088      	movs	r0, #136	; 0x88
 8000932:	f7ff fdff 	bl	8000534 <ILI9341_SendData>
			break;
 8000936:	bf00      	nop
	}
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000

08000944 <draw_spaceship>:
  * @brief  The application entry point.
  * @retval int
  */

void  draw_spaceship(uint16_t x_printing , uint16_t y_printing )
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af02      	add	r7, sp, #8
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	80fb      	strh	r3, [r7, #6]
 8000950:	4613      	mov	r3, r2
 8000952:	80bb      	strh	r3, [r7, #4]
	  ILI9341_printImage(x_printing, y_printing, 36, 36, spaceship, 2592);
 8000954:	88b9      	ldrh	r1, [r7, #4]
 8000956:	88f8      	ldrh	r0, [r7, #6]
 8000958:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <draw_spaceship+0x30>)
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2324      	movs	r3, #36	; 0x24
 8000964:	2224      	movs	r2, #36	; 0x24
 8000966:	f7ff ff69 	bl	800083c <ILI9341_printImage>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	0800306c 	.word	0x0800306c

08000978 <main>:

int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /*Allocation of possition array*/
  currentpossition = calloc(2, sizeof(uint16_t)); // No need to cast uint16_t in C
 800097e:	2102      	movs	r1, #2
 8000980:	2002      	movs	r0, #2
 8000982:	f002 fa57 	bl	8002e34 <calloc>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <main+0xa8>)
 800098c:	601a      	str	r2, [r3, #0]
  currentpossition[0] = _CURRENTPOSX;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0xa8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	221e      	movs	r2, #30
 8000994:	801a      	strh	r2, [r3, #0]
  currentpossition[1] = _CURRENTPOSY;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <main+0xa8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3302      	adds	r3, #2
 800099c:	2278      	movs	r2, #120	; 0x78
 800099e:	801a      	strh	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 fd10 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f84a 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f912 	bl	8000bd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009ac:	f000 f8b0 	bl	8000b10 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80009b0:	f000 f8e4 	bl	8000b7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1,LCD_CS_GPIO_Port, LCD_CS_Pin,LCD_DC_GPIO_Port,LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <main+0xac>)
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <main+0xb0>)
 80009c4:	2210      	movs	r2, #16
 80009c6:	4918      	ldr	r1, [pc, #96]	; (8000a28 <main+0xb0>)
 80009c8:	4818      	ldr	r0, [pc, #96]	; (8000a2c <main+0xb4>)
 80009ca:	f7ff fe33 	bl	8000634 <ILI9341_Init>
  ILI9341_setRotation(2);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f7ff ff6c 	bl	80008ac <ILI9341_setRotation>
  ILI9341_Fill(0x10A2);
 80009d4:	f241 00a2 	movw	r0, #4258	; 0x10a2
 80009d8:	f7ff feec 	bl	80007b4 <ILI9341_Fill>

   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e2:	4810      	ldr	r0, [pc, #64]	; (8000a24 <main+0xac>)
 80009e4:	f001 f84a 	bl	8001a7c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2108      	movs	r1, #8
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <main+0xb8>)
 80009ee:	f001 f845 	bl	8001a7c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <main+0xb8>)
 80009f8:	f001 f840 	bl	8001a7c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2120      	movs	r1, #32
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <main+0xb8>)
 8000a02:	f001 f83b 	bl	8001a7c <HAL_GPIO_WritePin>
   ILI9341_printImage(40,40, 260, 150, startingscreen,78000);
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <main+0xbc>)
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <main+0xc0>)
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2396      	movs	r3, #150	; 0x96
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	2128      	movs	r1, #40	; 0x28
 8000a16:	2028      	movs	r0, #40	; 0x28
 8000a18:	f7ff ff10 	bl	800083c <ILI9341_printImage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0xa4>
 8000a1e:	bf00      	nop
 8000a20:	2001326c 	.word	0x2001326c
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	200131b0 	.word	0x200131b0
 8000a30:	40020400 	.word	0x40020400
 8000a34:	000130b0 	.word	0x000130b0
 8000a38:	20000004 	.word	0x20000004

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2230      	movs	r2, #48	; 0x30
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fa32 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aac:	2308      	movs	r3, #8
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ab0:	23a8      	movs	r3, #168	; 0xa8
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f80d 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000acc:	f000 fb0e 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000adc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2105      	movs	r1, #5
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fa6e 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000afa:	f000 faf7 	bl	80010ec <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <MX_SPI1_Init+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_SPI1_Init+0x64>)
 8000b62:	f001 fc15 	bl	8002390 <HAL_SPI_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b6c:	f000 fabe 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200131b0 	.word	0x200131b0
 8000b78:	40013000 	.word	0x40013000

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f001 fe7c 	bl	80028b0 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 fa95 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20013208 	.word	0x20013208
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a4a      	ldr	r2, [pc, #296]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a3c      	ldr	r2, [pc, #240]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <MX_GPIO_Init+0x148>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4830      	ldr	r0, [pc, #192]	; (8000d1c <MX_GPIO_Init+0x14c>)
 8000c5c:	f000 ff0e 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 8000c66:	482e      	ldr	r0, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x150>)
 8000c68:	f000 ff08 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2138      	movs	r1, #56	; 0x38
 8000c70:	482c      	ldr	r0, [pc, #176]	; (8000d24 <MX_GPIO_Init+0x154>)
 8000c72:	f000 ff03 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000c76:	2310      	movs	r3, #16
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4824      	ldr	r0, [pc, #144]	; (8000d1c <MX_GPIO_Init+0x14c>)
 8000c8a:	f000 fd43 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481d      	ldr	r0, [pc, #116]	; (8000d1c <MX_GPIO_Init+0x14c>)
 8000ca6:	f000 fd35 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin PA15 */
  GPIO_InitStruct.Pin = LCD_RST_Pin|GPIO_PIN_15;
 8000caa:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4817      	ldr	r0, [pc, #92]	; (8000d20 <MX_GPIO_Init+0x150>)
 8000cc4:	f000 fd26 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cc8:	2338      	movs	r3, #56	; 0x38
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_GPIO_Init+0x154>)
 8000ce0:	f000 fd18 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ce4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <MX_GPIO_Init+0x154>)
 8000cfc:	f000 fd0a 	bl	8001714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2017      	movs	r0, #23
 8000d06:	f000 fcce 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d0a:	2017      	movs	r0, #23
 8000d0c:	f000 fce7 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020400 	.word	0x40020400

08000d28 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8000d32:	f000 fbad 	bl	8001490 <HAL_GetTick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a9f      	ldr	r2, [pc, #636]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x290>)
 8000d3a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000d3c:	4b9e      	ldr	r3, [pc, #632]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x290>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b9e      	ldr	r3, [pc, #632]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x294>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b0a      	cmp	r3, #10
 8000d48:	f240 81bd 	bls.w	80010c6 <HAL_GPIO_EXTI_Callback+0x39e>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d4c:	4b9c      	ldr	r3, [pc, #624]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x298>)
 8000d4e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000d52:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000d54:	4b9a      	ldr	r3, [pc, #616]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x298>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d5a:	4b99      	ldr	r3, [pc, #612]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x298>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	4b97      	ldr	r3, [pc, #604]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x298>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000d66:	4996      	ldr	r1, [pc, #600]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x298>)
 8000d68:	4896      	ldr	r0, [pc, #600]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000d6a:	f000 fcd3 	bl	8001714 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4894      	ldr	r0, [pc, #592]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000d76:	f000 fe81 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4891      	ldr	r0, [pc, #580]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000d80:	f000 fe7c 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2110      	movs	r1, #16
 8000d88:	488e      	ldr	r0, [pc, #568]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000d8a:	f000 fe77 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	488c      	ldr	r0, [pc, #560]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000d94:	f000 fe72 	bl	8001a7c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	2b40      	cmp	r3, #64	; 0x40
 8000d9c:	d10a      	bne.n	8000db4 <HAL_GPIO_EXTI_Callback+0x8c>
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4888      	ldr	r0, [pc, #544]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000da2:	f000 fe53 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_EXTI_Callback+0x8c>
    {
      keyPressed = 68; //ASCII value of D
 8000dac:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000dae:	2244      	movs	r2, #68	; 0x44
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e03d      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x108>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	2b80      	cmp	r3, #128	; 0x80
 8000db8:	d11b      	bne.n	8000df2 <HAL_GPIO_EXTI_Callback+0xca>
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	4881      	ldr	r0, [pc, #516]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000dbe:	f000 fe45 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d014      	beq.n	8000df2 <HAL_GPIO_EXTI_Callback+0xca>
    {
      keyPressed = 67; //ASCII value of C
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000dca:	2243      	movs	r2, #67	; 0x43
 8000dcc:	701a      	strb	r2, [r3, #0]
      ILI9341_Fill(0x10A2);
 8000dce:	f241 00a2 	movw	r0, #4258	; 0x10a2
 8000dd2:	f7ff fcef 	bl	80007b4 <ILI9341_Fill>
      currentpossition[0] = _CURRENTPOSX;
 8000dd6:	4b7e      	ldr	r3, [pc, #504]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	221e      	movs	r2, #30
 8000ddc:	801a      	strh	r2, [r3, #0]
      currentpossition[1] = _CURRENTPOSY;
 8000dde:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3302      	adds	r3, #2
 8000de4:	2278      	movs	r2, #120	; 0x78
 8000de6:	801a      	strh	r2, [r3, #0]
      draw_spaceship(30,120);
 8000de8:	2178      	movs	r1, #120	; 0x78
 8000dea:	201e      	movs	r0, #30
 8000dec:	f7ff fdaa 	bl	8000944 <draw_spaceship>
 8000df0:	e01e      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x108>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df8:	d10b      	bne.n	8000e12 <HAL_GPIO_EXTI_Callback+0xea>
 8000dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfe:	4871      	ldr	r0, [pc, #452]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e00:	f000 fe24 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_EXTI_Callback+0xea>
    {
      keyPressed = 66; //ASCII value of B
 8000e0a:	4b70      	ldr	r3, [pc, #448]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000e0c:	2242      	movs	r2, #66	; 0x42
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e00e      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x108>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e18:	d10a      	bne.n	8000e30 <HAL_GPIO_EXTI_Callback+0x108>
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	4869      	ldr	r0, [pc, #420]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e20:	f000 fe14 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <HAL_GPIO_EXTI_Callback+0x108>
    {
      keyPressed = 65; //ASCII value of A
 8000e2a:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000e2c:	2241      	movs	r2, #65	; 0x41
 8000e2e:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e36:	4864      	ldr	r0, [pc, #400]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000e38:	f000 fe20 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4860      	ldr	r0, [pc, #384]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e42:	f000 fe1b 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2110      	movs	r1, #16
 8000e4a:	485e      	ldr	r0, [pc, #376]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e4c:	f000 fe16 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2120      	movs	r1, #32
 8000e54:	485b      	ldr	r0, [pc, #364]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e56:	f000 fe11 	bl	8001a7c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	2b40      	cmp	r3, #64	; 0x40
 8000e5e:	d10a      	bne.n	8000e76 <HAL_GPIO_EXTI_Callback+0x14e>
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4858      	ldr	r0, [pc, #352]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e64:	f000 fdf2 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_EXTI_Callback+0x14e>
    {
      keyPressed = 35; //ASCII value of #
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000e70:	2223      	movs	r2, #35	; 0x23
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e02c      	b.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x1a8>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	2b80      	cmp	r3, #128	; 0x80
 8000e7a:	d10a      	bne.n	8000e92 <HAL_GPIO_EXTI_Callback+0x16a>
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	4851      	ldr	r0, [pc, #324]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000e80:	f000 fde4 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_EXTI_Callback+0x16a>
    {
      keyPressed = 57; //ASCII value of 9
 8000e8a:	4b50      	ldr	r3, [pc, #320]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000e8c:	2239      	movs	r2, #57	; 0x39
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e01e      	b.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x1a8>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e98:	d10b      	bne.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x18a>
 8000e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9e:	4849      	ldr	r0, [pc, #292]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000ea0:	f000 fdd4 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x18a>
    {
      keyPressed = 54; //ASCII value of 6
 8000eaa:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000eac:	2236      	movs	r2, #54	; 0x36
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e00e      	b.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x1a8>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x1a8>
 8000eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebe:	4841      	ldr	r0, [pc, #260]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000ec0:	f000 fdc4 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x1a8>
    {
      keyPressed = 51; //ASCII value of 3
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000ecc:	2233      	movs	r2, #51	; 0x33
 8000ece:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed6:	483c      	ldr	r0, [pc, #240]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000ed8:	f000 fdd0 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4838      	ldr	r0, [pc, #224]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000ee2:	f000 fdcb 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4836      	ldr	r0, [pc, #216]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000eec:	f000 fdc6 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4833      	ldr	r0, [pc, #204]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000ef6:	f000 fdc1 	bl	8001a7c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	2b40      	cmp	r3, #64	; 0x40
 8000efe:	d10a      	bne.n	8000f16 <HAL_GPIO_EXTI_Callback+0x1ee>
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	4830      	ldr	r0, [pc, #192]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f04:	f000 fda2 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_EXTI_Callback+0x1ee>
    {
      keyPressed = 48; //ASCII value of 0
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000f10:	2230      	movs	r2, #48	; 0x30
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e02c      	b.n	8000f70 <HAL_GPIO_EXTI_Callback+0x248>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b80      	cmp	r3, #128	; 0x80
 8000f1a:	d10a      	bne.n	8000f32 <HAL_GPIO_EXTI_Callback+0x20a>
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4829      	ldr	r0, [pc, #164]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f20:	f000 fd94 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_EXTI_Callback+0x20a>
    {
      keyPressed = 56; //ASCII value of 8
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000f2c:	2238      	movs	r2, #56	; 0x38
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e01e      	b.n	8000f70 <HAL_GPIO_EXTI_Callback+0x248>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f38:	d10b      	bne.n	8000f52 <HAL_GPIO_EXTI_Callback+0x22a>
 8000f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f40:	f000 fd84 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_EXTI_Callback+0x22a>
    {
      keyPressed = 53; //ASCII value of 5
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000f4c:	2235      	movs	r2, #53	; 0x35
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e00e      	b.n	8000f70 <HAL_GPIO_EXTI_Callback+0x248>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f58:	d10a      	bne.n	8000f70 <HAL_GPIO_EXTI_Callback+0x248>
 8000f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5e:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f60:	f000 fd74 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <HAL_GPIO_EXTI_Callback+0x248>
    {
      keyPressed = 50; //ASCII value of 2
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000f6c:	2232      	movs	r2, #50	; 0x32
 8000f6e:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000f78:	f000 fd80 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f82:	f000 fd7b 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2110      	movs	r1, #16
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f8c:	f000 fd76 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2120      	movs	r1, #32
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f96:	f000 fd71 	bl	8001a7c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	2b40      	cmp	r3, #64	; 0x40
 8000f9e:	d119      	bne.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x2ac>
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000fa4:	f000 fd52 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d012      	beq.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x2ac>
    {
      keyPressed = 42; //ASCII value of *
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000fb0:	222a      	movs	r2, #42	; 0x2a
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e063      	b.n	800107e <HAL_GPIO_EXTI_Callback+0x356>
 8000fb6:	bf00      	nop
 8000fb8:	20013264 	.word	0x20013264
 8000fbc:	20013260 	.word	0x20013260
 8000fc0:	2001324c 	.word	0x2001324c
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	20013268 	.word	0x20013268
 8000fd0:	2001326c 	.word	0x2001326c
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	2b80      	cmp	r3, #128	; 0x80
 8000fd8:	d11d      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x2ee>
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	483c      	ldr	r0, [pc, #240]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8000fde:	f000 fd35 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d016      	beq.n	8001016 <HAL_GPIO_EXTI_Callback+0x2ee>
    {
      keyPressed = 55; //ASCII value of 7
 8000fe8:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_GPIO_EXTI_Callback+0x3ac>)
 8000fea:	2237      	movs	r2, #55	; 0x37
 8000fec:	701a      	strb	r2, [r3, #0]
      currentpossition[0]= currentpossition[0] + 5;
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	881a      	ldrh	r2, [r3, #0]
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3205      	adds	r2, #5
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	801a      	strh	r2, [r3, #0]
      draw_spaceship(currentpossition[0], currentpossition[1]);
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3302      	adds	r3, #2
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f7ff fc98 	bl	8000944 <draw_spaceship>
 8001014:	e033      	b.n	800107e <HAL_GPIO_EXTI_Callback+0x356>

    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101c:	d120      	bne.n	8001060 <HAL_GPIO_EXTI_Callback+0x338>
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	482b      	ldr	r0, [pc, #172]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001024:	f000 fd12 	bl	8001a4c <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d018      	beq.n	8001060 <HAL_GPIO_EXTI_Callback+0x338>
    {
      keyPressed = 52; //ASCII value of 4
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001030:	2234      	movs	r2, #52	; 0x34
 8001032:	701a      	strb	r2, [r3, #0]
      currentpossition[1] = currentpossition[1] + 5;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3302      	adds	r3, #2
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3302      	adds	r3, #2
 8001042:	3205      	adds	r2, #5
 8001044:	b292      	uxth	r2, r2
 8001046:	801a      	strh	r2, [r3, #0]
      draw_spaceship(currentpossition[0], currentpossition[1]);
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3302      	adds	r3, #2
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	4610      	mov	r0, r2
 800105a:	f7ff fc73 	bl	8000944 <draw_spaceship>
 800105e:	e00e      	b.n	800107e <HAL_GPIO_EXTI_Callback+0x356>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001066:	d10a      	bne.n	800107e <HAL_GPIO_EXTI_Callback+0x356>
 8001068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 800106e:	f000 fced 	bl	8001a4c <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_GPIO_EXTI_Callback+0x356>
    {
      keyPressed = 49; //ASCII value of 1
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_GPIO_EXTI_Callback+0x3ac>)
 800107a:	2231      	movs	r2, #49	; 0x31
 800107c:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001086:	f000 fcf9 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	2108      	movs	r1, #8
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001090:	f000 fcf4 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 800109a:	f000 fcef 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	2120      	movs	r1, #32
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80010a4:	f000 fcea 	bl	8001a7c <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80010aa:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 80010ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80010b6:	490a      	ldr	r1, [pc, #40]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80010ba:	f000 fb2b 	bl	8001714 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80010c4:	6013      	str	r3, [r2, #0]
  }
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020400 	.word	0x40020400
 80010d4:	20013268 	.word	0x20013268
 80010d8:	2001326c 	.word	0x2001326c
 80010dc:	40020000 	.word	0x40020000
 80010e0:	2001324c 	.word	0x2001324c
 80010e4:	20013264 	.word	0x20013264
 80010e8:	20013260 	.word	0x20013260

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_SPI_MspInit+0x84>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12b      	bne.n	80011c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_SPI_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011a2:	23e0      	movs	r3, #224	; 0xe0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_SPI_MspInit+0x8c>)
 80011be:	f000 faa9 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40013000 	.word	0x40013000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_UART_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12b      	bne.n	8001252 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_UART_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_UART_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001242:	2307      	movs	r3, #7
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_UART_MspInit+0x8c>)
 800124e:	f000 fa61 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8d8 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012c0:	2040      	movs	r0, #64	; 0x40
 80012c2:	f000 fbf5 	bl	8001ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	f000 fbf2 	bl	8001ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012d0:	f000 fbee 	bl	8001ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d8:	f000 fbea 	bl	8001ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f001 fd98 	bl	8002e44 <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20020000 	.word	0x20020000
 8001340:	00000400 	.word	0x00000400
 8001344:	20013270 	.word	0x20013270
 8001348:	20013288 	.word	0x20013288

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800138c:	4c0b      	ldr	r4, [pc, #44]	; (80013bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139a:	f7ff ffd7 	bl	800134c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139e:	f001 fd57 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fae9 	bl	8000978 <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20013124 	.word	0x20013124
  ldr r2, =_sidata
 80013b4:	08003ab4 	.word	0x08003ab4
  ldr r2, =_sbss
 80013b8:	20013124 	.word	0x20013124
  ldr r4, =_ebss
 80013bc:	20013288 	.word	0x20013288

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f94f 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fe7e 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f967 	bl	80016fa <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f92f 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200130b4 	.word	0x200130b4
 8001460:	200130bc 	.word	0x200130bc
 8001464:	200130b8 	.word	0x200130b8

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200130bc 	.word	0x200130bc
 800148c:	20013274 	.word	0x20013274

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20013274 	.word	0x20013274

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200130bc 	.word	0x200130bc

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e16b      	b.n	8001a08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 815a 	bne.w	8001a02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	2b02      	cmp	r3, #2
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80b4 	beq.w	8001a02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b60      	ldr	r3, [pc, #384]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a5b      	ldr	r2, [pc, #364]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02b      	beq.n	800193a <HAL_GPIO_Init+0x226>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a51      	ldr	r2, [pc, #324]	; (8001a2c <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x222>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x21e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_GPIO_Init+0x324>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x216>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x328>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x32c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x330>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x20a>
 800191a:	2307      	movs	r3, #7
 800191c:	e00e      	b.n	800193c <HAL_GPIO_Init+0x228>
 800191e:	2308      	movs	r3, #8
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001922:	2306      	movs	r3, #6
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x228>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x310>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_GPIO_Init+0x334>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_GPIO_Init+0x334>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_GPIO_Init+0x334>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f ae90 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021c00 	.word	0x40021c00
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f92a 	bl	8000d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e267      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d075      	beq.n	8001bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4b85      	ldr	r3, [pc, #532]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d157      	bne.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e242      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x74>
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6f      	ldr	r2, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6c      	ldr	r2, [pc, #432]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b78:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a68      	ldr	r2, [pc, #416]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b66      	ldr	r3, [pc, #408]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a65      	ldr	r2, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fc7a 	bl	8001490 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fc76 	bl	8001490 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e207      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fc66 	bl	8001490 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fc62 	bl	8001490 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c7      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4937      	ldr	r1, [pc, #220]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fc1b 	bl	8001490 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fc17 	bl	8001490 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a8      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4925      	ldr	r1, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fbfa 	bl	8001490 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fbf6 	bl	8001490 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e187      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d036      	beq.n	8001d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fbda 	bl	8001490 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fbd6 	bl	8001490 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e167      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x200>
 8001cfe:	e01b      	b.n	8001d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fbc3 	bl	8001490 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	e00e      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fbbf 	bl	8001490 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d907      	bls.n	8001d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e150      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470000 	.word	0x42470000
 8001d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ea      	bne.n	8001d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8097 	beq.w	8001e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a7c      	ldr	r2, [pc, #496]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b74      	ldr	r3, [pc, #464]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a73      	ldr	r2, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fb7f 	bl	8001490 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff fb7b 	bl	8001490 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e10c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x2ea>
 8001dbc:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a63      	ldr	r2, [pc, #396]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	e01c      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x30c>
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a5e      	ldr	r2, [pc, #376]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a5b      	ldr	r2, [pc, #364]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a54      	ldr	r2, [pc, #336]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fb40 	bl	8001490 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff fb3c 	bl	8001490 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0cb      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ee      	beq.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fb2a 	bl	8001490 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff fb26 	bl	8001490 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0b5      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ee      	bne.n	8001e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e68:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a1 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d05c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d141      	bne.n	8001f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fafa 	bl	8001490 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff faf6 	bl	8001490 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e087      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	491b      	ldr	r1, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff facf 	bl	8001490 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff facb 	bl	8001490 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e05c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x416>
 8001f14:	e054      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fab8 	bl	8001490 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff fab4 	bl	8001490 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e045      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e038      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d028      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d121      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cc      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b68      	ldr	r3, [pc, #416]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d90c      	bls.n	800200c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800202e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e067      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4934      	ldr	r1, [pc, #208]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f9e6 	bl	8001490 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7ff f9e2 	bl	8001490 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d20c      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f946 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	08003a8c 	.word	0x08003a8c
 8002194:	200130b4 	.word	0x200130b4
 8002198:	200130b8 	.word	0x200130b8

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a0:	b090      	sub	sp, #64	; 0x40
 80021a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
 80021a8:	2300      	movs	r3, #0
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCC_GetSysClockFreq+0x180>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d00d      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x40>
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	f200 80a1 	bhi.w	8002308 <HAL_RCC_GetSysClockFreq+0x16c>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ce:	e09b      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_GetSysClockFreq+0x184>)
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021d4:	e09b      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_GetSysClockFreq+0x188>)
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021da:	e098      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021dc:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_GetSysClockFreq+0x180>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e6:	4b4d      	ldr	r3, [pc, #308]	; (800231c <HAL_RCC_GetSysClockFreq+0x180>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d028      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCC_GetSysClockFreq+0x180>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	2200      	movs	r2, #0
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	627a      	str	r2, [r7, #36]	; 0x24
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002204:	2100      	movs	r1, #0
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCC_GetSysClockFreq+0x188>)
 8002208:	fb03 f201 	mul.w	r2, r3, r1
 800220c:	2300      	movs	r3, #0
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	4413      	add	r3, r2
 8002214:	4a43      	ldr	r2, [pc, #268]	; (8002324 <HAL_RCC_GetSysClockFreq+0x188>)
 8002216:	fba0 1202 	umull	r1, r2, r0, r2
 800221a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800221c:	460a      	mov	r2, r1
 800221e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002222:	4413      	add	r3, r2
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	2200      	movs	r2, #0
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	61fa      	str	r2, [r7, #28]
 800222e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002232:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002236:	f7fd ffc7 	bl	80001c8 <__aeabi_uldivmod>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4613      	mov	r3, r2
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002242:	e053      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCC_GetSysClockFreq+0x180>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	2200      	movs	r2, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	617a      	str	r2, [r7, #20]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002256:	f04f 0b00 	mov.w	fp, #0
 800225a:	4652      	mov	r2, sl
 800225c:	465b      	mov	r3, fp
 800225e:	f04f 0000 	mov.w	r0, #0
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	0159      	lsls	r1, r3, #5
 8002268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800226c:	0150      	lsls	r0, r2, #5
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	ebb2 080a 	subs.w	r8, r2, sl
 8002276:	eb63 090b 	sbc.w	r9, r3, fp
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002286:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800228a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800228e:	ebb2 0408 	subs.w	r4, r2, r8
 8002292:	eb63 0509 	sbc.w	r5, r3, r9
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	00eb      	lsls	r3, r5, #3
 80022a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a4:	00e2      	lsls	r2, r4, #3
 80022a6:	4614      	mov	r4, r2
 80022a8:	461d      	mov	r5, r3
 80022aa:	eb14 030a 	adds.w	r3, r4, sl
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	eb45 030b 	adc.w	r3, r5, fp
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c2:	4629      	mov	r1, r5
 80022c4:	028b      	lsls	r3, r1, #10
 80022c6:	4621      	mov	r1, r4
 80022c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022cc:	4621      	mov	r1, r4
 80022ce:	028a      	lsls	r2, r1, #10
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	2200      	movs	r2, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	60fa      	str	r2, [r7, #12]
 80022dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e0:	f7fd ff72 	bl	80001c8 <__aeabi_uldivmod>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4613      	mov	r3, r2
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_GetSysClockFreq+0x180>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	3301      	adds	r3, #1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetSysClockFreq+0x184>)
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002310:	4618      	mov	r0, r3
 8002312:	3740      	adds	r7, #64	; 0x40
 8002314:	46bd      	mov	sp, r7
 8002316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	00f42400 	.word	0x00f42400
 8002324:	017d7840 	.word	0x017d7840

08002328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_RCC_GetHCLKFreq+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200130b4 	.word	0x200130b4

08002340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002344:	f7ff fff0 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	08003a9c 	.word	0x08003a9c

08002368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800236c:	f7ff ffdc 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0b5b      	lsrs	r3, r3, #13
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK2Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	08003a9c 	.word	0x08003a9c

08002390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07b      	b.n	800249a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b2:	d009      	beq.n	80023c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe feb0 	bl	8001148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0104 	and.w	r1, r3, #4
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0210 	and.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b088      	sub	sp, #32
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_SPI_Transmit+0x22>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e126      	b.n	8002712 <HAL_SPI_Transmit+0x270>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024cc:	f7fe ffe0 	bl	8001490 <HAL_GetTick>
 80024d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d002      	beq.n	80024e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e6:	e10b      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Transmit+0x52>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f8:	e102      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	d10f      	bne.n	8002562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d007      	beq.n	8002580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002588:	d14b      	bne.n	8002622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_SPI_Transmit+0xf6>
 8002592:	8afb      	ldrh	r3, [r7, #22]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d13e      	bne.n	8002616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025bc:	e02b      	b.n	8002616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d112      	bne.n	80025f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	1c9a      	adds	r2, r3, #2
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80025f0:	e011      	b.n	8002616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f2:	f7fe ff4d 	bl	8001490 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d803      	bhi.n	800260a <HAL_SPI_Transmit+0x168>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d102      	bne.n	8002610 <HAL_SPI_Transmit+0x16e>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002614:	e074      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ce      	bne.n	80025be <HAL_SPI_Transmit+0x11c>
 8002620:	e04c      	b.n	80026bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_SPI_Transmit+0x18e>
 800262a:	8afb      	ldrh	r3, [r7, #22]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d140      	bne.n	80026b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002656:	e02c      	b.n	80026b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d113      	bne.n	800268e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	86da      	strh	r2, [r3, #54]	; 0x36
 800268c:	e011      	b.n	80026b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268e:	f7fe feff 	bl	8001490 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d803      	bhi.n	80026a6 <HAL_SPI_Transmit+0x204>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d102      	bne.n	80026ac <HAL_SPI_Transmit+0x20a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026b0:	e026      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1cd      	bne.n	8002658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f8b3 	bl	800282c <SPI_EndRxTxTransaction>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e000      	b.n	8002700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80026fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002710:	7ffb      	ldrb	r3, [r7, #31]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800272c:	f7fe feb0 	bl	8001490 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800273c:	f7fe fea8 	bl	8001490 <HAL_GetTick>
 8002740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002752:	e054      	b.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d050      	beq.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800275c:	f7fe fe98 	bl	8001490 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	429a      	cmp	r2, r3
 800276a:	d902      	bls.n	8002772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d13d      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278a:	d111      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	d004      	beq.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d107      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b8:	d10f      	bne.n	80027da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e017      	b.n	800281e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4013      	ands	r3, r2
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	429a      	cmp	r2, r3
 800281a:	d19b      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200130b4 	.word	0x200130b4

0800282c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <SPI_EndRxTxTransaction+0x7c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <SPI_EndRxTxTransaction+0x80>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0d5b      	lsrs	r3, r3, #21
 8002844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002856:	d112      	bne.n	800287e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff ff5a 	bl	800271c <SPI_WaitFlagStateUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e00f      	b.n	800289e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3b01      	subs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d0f2      	beq.n	800287e <SPI_EndRxTxTransaction+0x52>
 8002898:	e000      	b.n	800289c <SPI_EndRxTxTransaction+0x70>
        break;
 800289a:	bf00      	nop
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200130b4 	.word	0x200130b4
 80028ac:	165e9f81 	.word	0x165e9f81

080028b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e03f      	b.n	8002942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fc7e 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f829 	bl	800294c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b0c0      	sub	sp, #256	; 0x100
 8002952:	af00      	add	r7, sp, #0
 8002954:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	ea40 0301 	orr.w	r3, r0, r1
 8002974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	431a      	orrs	r2, r3
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029a4:	f021 010c 	bic.w	r1, r1, #12
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029b2:	430b      	orrs	r3, r1
 80029b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	6999      	ldr	r1, [r3, #24]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	ea40 0301 	orr.w	r3, r0, r1
 80029d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <UART_SetConfig+0x2cc>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d005      	beq.n	80029ec <UART_SetConfig+0xa0>
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b8d      	ldr	r3, [pc, #564]	; (8002c1c <UART_SetConfig+0x2d0>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d104      	bne.n	80029f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029ec:	f7ff fcbc 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 80029f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029f4:	e003      	b.n	80029fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029f6:	f7ff fca3 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 80029fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a08:	f040 810c 	bne.w	8002c24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	1891      	adds	r1, r2, r2
 8002a24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a26:	415b      	adcs	r3, r3
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a2e:	4621      	mov	r1, r4
 8002a30:	eb12 0801 	adds.w	r8, r2, r1
 8002a34:	4629      	mov	r1, r5
 8002a36:	eb43 0901 	adc.w	r9, r3, r1
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	eb18 0303 	adds.w	r3, r8, r3
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	eb49 0303 	adc.w	r3, r9, r3
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	18db      	adds	r3, r3, r3
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a80:	4613      	mov	r3, r2
 8002a82:	eb42 0303 	adc.w	r3, r2, r3
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
 8002a88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a90:	f7fd fb9a 	bl	80001c8 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011c      	lsls	r4, r3, #4
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002abc:	415b      	adcs	r3, r3
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	eb12 0a01 	adds.w	sl, r2, r1
 8002aca:	4649      	mov	r1, r9
 8002acc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae4:	4692      	mov	sl, r2
 8002ae6:	469b      	mov	fp, r3
 8002ae8:	4643      	mov	r3, r8
 8002aea:	eb1a 0303 	adds.w	r3, sl, r3
 8002aee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002af2:	464b      	mov	r3, r9
 8002af4:	eb4b 0303 	adc.w	r3, fp, r3
 8002af8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b10:	460b      	mov	r3, r1
 8002b12:	18db      	adds	r3, r3, r3
 8002b14:	643b      	str	r3, [r7, #64]	; 0x40
 8002b16:	4613      	mov	r3, r2
 8002b18:	eb42 0303 	adc.w	r3, r2, r3
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b26:	f7fd fb4f 	bl	80001c8 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002b32:	fba3 2301 	umull	r2, r3, r3, r1
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2264      	movs	r2, #100	; 0x64
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	1acb      	subs	r3, r1, r3
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002b48:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b54:	441c      	add	r4, r3
 8002b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b70:	415b      	adcs	r3, r3
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b78:	4641      	mov	r1, r8
 8002b7a:	1851      	adds	r1, r2, r1
 8002b7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b7e:	4649      	mov	r1, r9
 8002b80:	414b      	adcs	r3, r1
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b90:	4659      	mov	r1, fp
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bac:	464b      	mov	r3, r9
 8002bae:	460a      	mov	r2, r1
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bcc:	460b      	mov	r3, r1
 8002bce:	18db      	adds	r3, r3, r3
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	eb42 0303 	adc.w	r3, r2, r3
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002be2:	f7fd faf1 	bl	80001c8 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3332      	adds	r3, #50	; 0x32
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <UART_SetConfig+0x2d4>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 0207 	and.w	r2, r3, #7
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4422      	add	r2, r4
 8002c12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c14:	e105      	b.n	8002e22 <UART_SetConfig+0x4d6>
 8002c16:	bf00      	nop
 8002c18:	40011000 	.word	0x40011000
 8002c1c:	40011400 	.word	0x40011400
 8002c20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c36:	4642      	mov	r2, r8
 8002c38:	464b      	mov	r3, r9
 8002c3a:	1891      	adds	r1, r2, r2
 8002c3c:	6239      	str	r1, [r7, #32]
 8002c3e:	415b      	adcs	r3, r3
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c46:	4641      	mov	r1, r8
 8002c48:	1854      	adds	r4, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb43 0501 	adc.w	r5, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	00eb      	lsls	r3, r5, #3
 8002c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5e:	00e2      	lsls	r2, r4, #3
 8002c60:	4614      	mov	r4, r2
 8002c62:	461d      	mov	r5, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	18e3      	adds	r3, r4, r3
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	eb45 0303 	adc.w	r3, r5, r3
 8002c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c92:	4629      	mov	r1, r5
 8002c94:	008b      	lsls	r3, r1, #2
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	008a      	lsls	r2, r1, #2
 8002ca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ca4:	f7fd fa90 	bl	80001c8 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002cae:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	011c      	lsls	r4, r3, #4
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	61b9      	str	r1, [r7, #24]
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	4641      	mov	r1, r8
 8002cda:	1851      	adds	r1, r2, r1
 8002cdc:	6139      	str	r1, [r7, #16]
 8002cde:	4649      	mov	r1, r9
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	00cb      	lsls	r3, r1, #3
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	00ca      	lsls	r2, r1, #3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	4642      	mov	r2, r8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	460a      	mov	r2, r1
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d30:	4649      	mov	r1, r9
 8002d32:	008b      	lsls	r3, r1, #2
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	008a      	lsls	r2, r1, #2
 8002d3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d42:	f7fd fa41 	bl	80001c8 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	; 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	3332      	adds	r3, #50	; 0x32
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6a:	441c      	add	r4, r3
 8002d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d70:	2200      	movs	r2, #0
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
 8002d74:	677a      	str	r2, [r7, #116]	; 0x74
 8002d76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d7a:	4642      	mov	r2, r8
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	415b      	adcs	r3, r3
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	1851      	adds	r1, r2, r1
 8002d8e:	6039      	str	r1, [r7, #0]
 8002d90:	4649      	mov	r1, r9
 8002d92:	414b      	adcs	r3, r1
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da2:	4659      	mov	r1, fp
 8002da4:	00cb      	lsls	r3, r1, #3
 8002da6:	4651      	mov	r1, sl
 8002da8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dac:	4651      	mov	r1, sl
 8002dae:	00ca      	lsls	r2, r1, #3
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	4642      	mov	r2, r8
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	eb42 0303 	adc.w	r3, r2, r3
 8002dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd0:	667a      	str	r2, [r7, #100]	; 0x64
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dde:	4649      	mov	r1, r9
 8002de0:	008b      	lsls	r3, r1, #2
 8002de2:	4641      	mov	r1, r8
 8002de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de8:	4641      	mov	r1, r8
 8002dea:	008a      	lsls	r2, r1, #2
 8002dec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002df0:	f7fd f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2164      	movs	r1, #100	; 0x64
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <UART_SetConfig+0x4e4>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4422      	add	r2, r4
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	bf00      	nop
 8002e24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2e:	bf00      	nop
 8002e30:	51eb851f 	.word	0x51eb851f

08002e34 <calloc>:
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <calloc+0xc>)
 8002e36:	460a      	mov	r2, r1
 8002e38:	4601      	mov	r1, r0
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f000 b842 	b.w	8002ec4 <_calloc_r>
 8002e40:	200130c0 	.word	0x200130c0

08002e44 <__errno>:
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <__errno+0x8>)
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	200130c0 	.word	0x200130c0

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4d0d      	ldr	r5, [pc, #52]	; (8002e88 <__libc_init_array+0x38>)
 8002e54:	4c0d      	ldr	r4, [pc, #52]	; (8002e8c <__libc_init_array+0x3c>)
 8002e56:	1b64      	subs	r4, r4, r5
 8002e58:	10a4      	asrs	r4, r4, #2
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	4d0b      	ldr	r5, [pc, #44]	; (8002e90 <__libc_init_array+0x40>)
 8002e62:	4c0c      	ldr	r4, [pc, #48]	; (8002e94 <__libc_init_array+0x44>)
 8002e64:	f000 f8f6 	bl	8003054 <_init>
 8002e68:	1b64      	subs	r4, r4, r5
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	08003aac 	.word	0x08003aac
 8002e8c:	08003aac 	.word	0x08003aac
 8002e90:	08003aac 	.word	0x08003aac
 8002e94:	08003ab0 	.word	0x08003ab0

08002e98 <memcpy>:
 8002e98:	440a      	add	r2, r1
 8002e9a:	4291      	cmp	r1, r2
 8002e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ea0:	d100      	bne.n	8002ea4 <memcpy+0xc>
 8002ea2:	4770      	bx	lr
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002eae:	4291      	cmp	r1, r2
 8002eb0:	d1f9      	bne.n	8002ea6 <memcpy+0xe>
 8002eb2:	bd10      	pop	{r4, pc}

08002eb4 <memset>:
 8002eb4:	4402      	add	r2, r0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <_calloc_r>:
 8002ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ec6:	fba1 2402 	umull	r2, r4, r1, r2
 8002eca:	b94c      	cbnz	r4, 8002ee0 <_calloc_r+0x1c>
 8002ecc:	4611      	mov	r1, r2
 8002ece:	9201      	str	r2, [sp, #4]
 8002ed0:	f000 f82e 	bl	8002f30 <_malloc_r>
 8002ed4:	9a01      	ldr	r2, [sp, #4]
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	b930      	cbnz	r0, 8002ee8 <_calloc_r+0x24>
 8002eda:	4628      	mov	r0, r5
 8002edc:	b003      	add	sp, #12
 8002ede:	bd30      	pop	{r4, r5, pc}
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	6002      	str	r2, [r0, #0]
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	e7f8      	b.n	8002eda <_calloc_r+0x16>
 8002ee8:	4621      	mov	r1, r4
 8002eea:	f7ff ffe3 	bl	8002eb4 <memset>
 8002eee:	e7f4      	b.n	8002eda <_calloc_r+0x16>

08002ef0 <sbrk_aligned>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	4e0e      	ldr	r6, [pc, #56]	; (8002f2c <sbrk_aligned+0x3c>)
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	6831      	ldr	r1, [r6, #0]
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b911      	cbnz	r1, 8002f02 <sbrk_aligned+0x12>
 8002efc:	f000 f88c 	bl	8003018 <_sbrk_r>
 8002f00:	6030      	str	r0, [r6, #0]
 8002f02:	4621      	mov	r1, r4
 8002f04:	4628      	mov	r0, r5
 8002f06:	f000 f887 	bl	8003018 <_sbrk_r>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	d00a      	beq.n	8002f24 <sbrk_aligned+0x34>
 8002f0e:	1cc4      	adds	r4, r0, #3
 8002f10:	f024 0403 	bic.w	r4, r4, #3
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d007      	beq.n	8002f28 <sbrk_aligned+0x38>
 8002f18:	1a21      	subs	r1, r4, r0
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 f87c 	bl	8003018 <_sbrk_r>
 8002f20:	3001      	adds	r0, #1
 8002f22:	d101      	bne.n	8002f28 <sbrk_aligned+0x38>
 8002f24:	f04f 34ff 	mov.w	r4, #4294967295
 8002f28:	4620      	mov	r0, r4
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	2001327c 	.word	0x2001327c

08002f30 <_malloc_r>:
 8002f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f34:	1ccd      	adds	r5, r1, #3
 8002f36:	f025 0503 	bic.w	r5, r5, #3
 8002f3a:	3508      	adds	r5, #8
 8002f3c:	2d0c      	cmp	r5, #12
 8002f3e:	bf38      	it	cc
 8002f40:	250c      	movcc	r5, #12
 8002f42:	2d00      	cmp	r5, #0
 8002f44:	4607      	mov	r7, r0
 8002f46:	db01      	blt.n	8002f4c <_malloc_r+0x1c>
 8002f48:	42a9      	cmp	r1, r5
 8002f4a:	d905      	bls.n	8002f58 <_malloc_r+0x28>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	2600      	movs	r6, #0
 8002f52:	4630      	mov	r0, r6
 8002f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f58:	4e2e      	ldr	r6, [pc, #184]	; (8003014 <_malloc_r+0xe4>)
 8002f5a:	f000 f86d 	bl	8003038 <__malloc_lock>
 8002f5e:	6833      	ldr	r3, [r6, #0]
 8002f60:	461c      	mov	r4, r3
 8002f62:	bb34      	cbnz	r4, 8002fb2 <_malloc_r+0x82>
 8002f64:	4629      	mov	r1, r5
 8002f66:	4638      	mov	r0, r7
 8002f68:	f7ff ffc2 	bl	8002ef0 <sbrk_aligned>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	4604      	mov	r4, r0
 8002f70:	d14d      	bne.n	800300e <_malloc_r+0xde>
 8002f72:	6834      	ldr	r4, [r6, #0]
 8002f74:	4626      	mov	r6, r4
 8002f76:	2e00      	cmp	r6, #0
 8002f78:	d140      	bne.n	8002ffc <_malloc_r+0xcc>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	4638      	mov	r0, r7
 8002f80:	eb04 0803 	add.w	r8, r4, r3
 8002f84:	f000 f848 	bl	8003018 <_sbrk_r>
 8002f88:	4580      	cmp	r8, r0
 8002f8a:	d13a      	bne.n	8003002 <_malloc_r+0xd2>
 8002f8c:	6821      	ldr	r1, [r4, #0]
 8002f8e:	3503      	adds	r5, #3
 8002f90:	1a6d      	subs	r5, r5, r1
 8002f92:	f025 0503 	bic.w	r5, r5, #3
 8002f96:	3508      	adds	r5, #8
 8002f98:	2d0c      	cmp	r5, #12
 8002f9a:	bf38      	it	cc
 8002f9c:	250c      	movcc	r5, #12
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	f7ff ffa5 	bl	8002ef0 <sbrk_aligned>
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	d02b      	beq.n	8003002 <_malloc_r+0xd2>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	442b      	add	r3, r5
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	e00e      	b.n	8002fd0 <_malloc_r+0xa0>
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	1b52      	subs	r2, r2, r5
 8002fb6:	d41e      	bmi.n	8002ff6 <_malloc_r+0xc6>
 8002fb8:	2a0b      	cmp	r2, #11
 8002fba:	d916      	bls.n	8002fea <_malloc_r+0xba>
 8002fbc:	1961      	adds	r1, r4, r5
 8002fbe:	42a3      	cmp	r3, r4
 8002fc0:	6025      	str	r5, [r4, #0]
 8002fc2:	bf18      	it	ne
 8002fc4:	6059      	strne	r1, [r3, #4]
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	bf08      	it	eq
 8002fca:	6031      	streq	r1, [r6, #0]
 8002fcc:	5162      	str	r2, [r4, r5]
 8002fce:	604b      	str	r3, [r1, #4]
 8002fd0:	4638      	mov	r0, r7
 8002fd2:	f104 060b 	add.w	r6, r4, #11
 8002fd6:	f000 f835 	bl	8003044 <__malloc_unlock>
 8002fda:	f026 0607 	bic.w	r6, r6, #7
 8002fde:	1d23      	adds	r3, r4, #4
 8002fe0:	1af2      	subs	r2, r6, r3
 8002fe2:	d0b6      	beq.n	8002f52 <_malloc_r+0x22>
 8002fe4:	1b9b      	subs	r3, r3, r6
 8002fe6:	50a3      	str	r3, [r4, r2]
 8002fe8:	e7b3      	b.n	8002f52 <_malloc_r+0x22>
 8002fea:	6862      	ldr	r2, [r4, #4]
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	bf0c      	ite	eq
 8002ff0:	6032      	streq	r2, [r6, #0]
 8002ff2:	605a      	strne	r2, [r3, #4]
 8002ff4:	e7ec      	b.n	8002fd0 <_malloc_r+0xa0>
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	6864      	ldr	r4, [r4, #4]
 8002ffa:	e7b2      	b.n	8002f62 <_malloc_r+0x32>
 8002ffc:	4634      	mov	r4, r6
 8002ffe:	6876      	ldr	r6, [r6, #4]
 8003000:	e7b9      	b.n	8002f76 <_malloc_r+0x46>
 8003002:	230c      	movs	r3, #12
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4638      	mov	r0, r7
 8003008:	f000 f81c 	bl	8003044 <__malloc_unlock>
 800300c:	e7a1      	b.n	8002f52 <_malloc_r+0x22>
 800300e:	6025      	str	r5, [r4, #0]
 8003010:	e7de      	b.n	8002fd0 <_malloc_r+0xa0>
 8003012:	bf00      	nop
 8003014:	20013278 	.word	0x20013278

08003018 <_sbrk_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4d06      	ldr	r5, [pc, #24]	; (8003034 <_sbrk_r+0x1c>)
 800301c:	2300      	movs	r3, #0
 800301e:	4604      	mov	r4, r0
 8003020:	4608      	mov	r0, r1
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	f7fe f95c 	bl	80012e0 <_sbrk>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d102      	bne.n	8003032 <_sbrk_r+0x1a>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	b103      	cbz	r3, 8003032 <_sbrk_r+0x1a>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	bd38      	pop	{r3, r4, r5, pc}
 8003034:	20013280 	.word	0x20013280

08003038 <__malloc_lock>:
 8003038:	4801      	ldr	r0, [pc, #4]	; (8003040 <__malloc_lock+0x8>)
 800303a:	f000 b809 	b.w	8003050 <__retarget_lock_acquire_recursive>
 800303e:	bf00      	nop
 8003040:	20013284 	.word	0x20013284

08003044 <__malloc_unlock>:
 8003044:	4801      	ldr	r0, [pc, #4]	; (800304c <__malloc_unlock+0x8>)
 8003046:	f000 b804 	b.w	8003052 <__retarget_lock_release_recursive>
 800304a:	bf00      	nop
 800304c:	20013284 	.word	0x20013284

08003050 <__retarget_lock_acquire_recursive>:
 8003050:	4770      	bx	lr

08003052 <__retarget_lock_release_recursive>:
 8003052:	4770      	bx	lr

08003054 <_init>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr

08003060 <_fini>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr
